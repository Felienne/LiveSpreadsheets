Title         : Live Literals: Liveness in Source Code
Author        : You
Affiliation   : Research institute
Email         : you@bar.com

Author        : My co-author
Affiliation   : Other institute
Email         : other@bar.com

Colorizer     : javascript
Bib style     : plainnat
Bibliography  : literaturelist
Logo          : True

Doc class     : [10pt]article

[TITLE]

~ Abstract
The idea of liveness to improve the experience of programming, been first proposed by Maloney and Smith, has received research attention in recent times. Most of these initiatives however bring liveness to the IDE, but not to the source code. In this paper we propose *live literals*, live updating literals right within the source code. Live literals are updated automatically when the code or the data is changed. 
Live literals have all the benefits of being live, like diminish the cognitive distance between the code and its execution, but they also have all the benefits of source code. Source code can easily be shared, diffed and version controlled.
We illustrate live literals with three example, implementing a spreadsheetlike grades calculation, a test scenario and *probes*. 


~

# Introduction     { #sec-intro }

Liveness is the property that without compiling or running, a system will update **reference?**

A related property is directness, defined as 'the feeling that a user can directly manipulate objects' @maloney_directness_1995. 

An example of both properties are spreadsheets, a spreadsheet user can just click a value or formula and update it right in the same spot (directness) and when changing a value, all formulas depending on it will update too (liveness) Unfortunately, literals in source code have neither of these properties. Values are often shared outside of source code, violating directness, and when we change source code, they are not updating, violating liveness. 

There have been several initiatives most of these initiatives however bring liveness to the IDE, but not to the source code. **references**

Our approach is different, as we propose to update literals in source code live, dubbed *live literals*

Live literals have all the benefits of being live, like diminish the cognitive distance between the code and its execution, but they also have all the benefits of source code. Source code can easily be shared, diffed and version controlled.

We illustrate live literals with three example, implementing a spreadsheetlike grades calculation, a test scenario and *probes*. 

# Background     { #background }

## Liveness

First proposed as a design principle by Maloney and Smith @maloney_directness_1995, liveness indicates that a user interface is always active and reactive. According to @maloney_directness_1995 in a live interface _``objects respond to user actions, animations run, layout happens, and information displays are updated continuously''_. More recently live programming has found its way to the public eye, among others by Bret Victor in his talk `Inventing on Principle' @Victor2012. Figure [#fig-bret], taken from Victor's talk, illustrates the idea of live programming: on the right, we have source code and on the left, we have the result of that code, in this case: a tree. Modifying the code will immediately affect the tree.
 
This liveness is also present in spreadsheet systems. When a users enters a formula and presses enter, they see the result, without any effort such as compilation. Liveness of spreadsheets powers their flexibility, often praised as their key success factor.

~ Figure { #fig-bret; caption:"Live programming: on the right the source code and on the left its instantiation of the code which changes immediately when the code is updated, screen shot from @Victor2012"; page-align:here }
![bret]
~
[bret]: images/bret.png "bret"  { width:auto; max-width:90% }

## Directness
Another benefit of spreadsheets is that their interface combines data, metadata and calculations together in one view, and provides the user with easy access to all. Just by clicking a formula, one can manipulate it. This is often called `directness': _``the feeling that one is directly manipulating the object''_@shneiderman_direct_1983. From a cognitive perspective, directness in computing means _``a small distance between a goal and the actions required of the user to achieve the goal_ @burnett_visual_2001.

Maloney and Smith describe directness as the fact that a user can  _``can initiate the process of examining or changing the attributes, structure, and behavior of user interface components by pointing at their graphical representations directly, as opposed to navigating through an alternate representation.''_ @maloney_directness_1995.

This almost exactly describes the interface of a spreadsheet. Instead of navigating to a code behind, a class or an object, spreadsheet users have all ingredients: data, metadata and calculations, in one view, and can access them with one click. 

# Live Literals    { #tg }

The idea of live literals is to have literals in source that change as you change their definition or input values, much like a spreadsheet. Consider this example **Ik wil nu een pagina met alleen zoiets erop**

``` javascript
cell(function square(num) {
  return (num*num) ;
});

var grades = sheet([
 {num: 12, square: 144},
 {num: 1, square: 1},
]);
```

**Dat voorbeeld boven moet dan hier live komen **

~ HtmlOnly
<iframe src=http://homepages.cwi.nl/~storm/livelit/livelit.html"  width="100%" height="450"></iframe>
~

The value of is updated when 1) the num input is changed or 2) the implementation of square is changed. 

## Implementation

**How zit dit in elkaar dan?**

# Examples

To illustrate the usefulness of Live Literals, we show three different examples:

## Solving spreadsheet problems

Spreadsheets are often used to do simple calculations in which data is summed or multiplied, both within rows are within columns. The benefits of using spreadsheets is that they are easy to use, and live. With Live Literals we can implement such spreadsheet problems.

In the example below, we want to calculate the average of students in our class, as well as the average of all students.

``` javascript
cell(function avg(sheet, lab, exam) {
  return (lab + exam) / 2;
});

cell(function classAvg(sheet) {
  return avg('avg', sheet);
});

var grades = sheet([
 {student: 'Felienne', lab: 32343, exam: 9, avg: 16176},
 {student: 'Tijs', lab: 10, exam:7.7, avg: 8.85},
 {student: 'Piet', lab: 4, exam:7.7, avg: 5.85},
 {classAvg: 5396.900000000001}
]);
```

## Testing methods
A benefit of live programming system is that it is easy to detect mistakes, as the data as well as the code are in one view. With Live Literals, we can also implement light weight unit tests, by adding a 'should' field to classes. A result is then added indicating whether or not the method fulfills the specification.

**ja, maar hoe werkt dat eigenlijk? Dat is conceptueel nog anders dan de literals want je voegt iets toe, even toelichten hier**

``` javascript
function add(x, y) {
  test([
   {x: 1, y: 3, should: 4},
   {x: 1, y: 5, result: 6}
  ]);
  return x + y;
}
```

## Probes

**Hier een korte samenvatting van Sean's paper**

Live Literals enabke brobes by... 

``` javascript
function binarySearch(key, array) {
    run({key: 'd', array: ['a', 'b', 'c', 'e', 'f']});

    var low = 0; 
    var high = array.length - 1; 

    var result = -1;
    while (low <= high) {
        p(low, [0,3]);
        p(high, [4,4]);
        
        var mid = Math.floor((low + high)/2);
        var value = array[mid];

        p(mid, [2,3]);
        p(value, ["c","e"]);

        if (value < key) {
            low = mid + 1; 
        }
        else if (value > key) {
            high = mid - 1;
        }
        else {
            result = mid;
            break;
        }
    }
    p(result, [-1])
    return result;
}
```









# Related Work

# Conclusion & Future Work


[BIB]
