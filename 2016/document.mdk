Title         : Bringing Spreadsheetlike Liveness to the IDE
Author        : You
Affiliation   : Research institute
Email         : you@bar.com

Author        : My co-author
Affiliation   : Other institute
Email         : other@bar.com

Colorizer     : javascript
Bib style     : plainnat
Bibliography  : literaturelist
Logo          : True

Doc class     : [10pt]article

[TITLE]

~ Abstract
Spreadsheet systems are live programming environments. Both the data and the code are right in front you, and if you edit either of them, the effects are immediately visible. Unfortunately, spreadsheets lack mechanisms for abstraction, such as classes, function definitions etc. Programming languages excel at abstraction, but most mainstream languages or IDEs don't support the interactive, live feedback loop of spreadsheets. As a result, exploring and testing of code is cumbersome and indirect. In this paper we explore two approaches to bring both worlds closer together. First we show how a spreadsheet-like user interface might be used for live unit testing. Second, we push this model into the source code itself, by introducing *live literals* which are updated automatically when the code or the data is changed. Finally, we show how the concept of live literals can be generalized to implement spreadsheets properly, right from within the source code.
~

# Introduction     { #sec-intro }

Spreadsheets are very popular end-user programming tools in many different domains. Especially in the financial domain, spreadsheets are ubiquitous. In 2004, the International Data Corporation interviewed 118 business leaders and found that 85\% were using spreadsheets in financial reporting and forecasting [@Panko2008].  Financial intelligence firm CODA reported in 2008 that 95\% of all U.S. companies use spreadsheets for financial reporting @Panko2008. In a survey held in 2003 by the US Bureau of Labor Statistics@BLS2003, over 60\% of 77 million surveyed workers in the US reported using spreadsheets, making this the third most common use of computers, after email and word processing. A more recent survey among 95 companies world-wide, placed spreadsheets fourth, after email, browsing and word processing, accounting for 7.4\% of computer time @Wellnomics2007. The Dutch Bureau of Statistics investigates computer literacy among Dutch civilians every year, and has reported a rise in people able to use formulas in spreadsheets from 44\% in 2006 to 54\% in 2013 @CBS2013.

Recently, it has been argued that spreadsheets are not "end-user programming" they are simply programming. Spreadsheet are so similar to source code *add cites here*

Spreadsheets are a very successful example of end-user programming, but more specifically, spreadsheets are also _live_ programming. Not only do spreadsheets have _liveness_ meaning that their interface is continuously updated, they also directness: the feeling that a user can directly manipulate objects @maloney_directness_1995. In spreadsheets, a user knows where to edit a formula, they simply click it, there is no 'code behind' to navigate to, for example.

In this paper we will describe two distinct approaches to bring the world of spreadsheets closer to programming and vice versa. Firstly, we introduce TrueGrid. TrueGrid is a spreadsheetlike interface designed for programmers, it combines a grid with data with programming in JavaScript. This way, as a programmer you can inspect data and play with implementation, before having to write interfaces or even unit tests. We envision this is a useful tool very early in the development process, when you have some data and only a vague direction on where the project is going. 

**Tijske: jij hier!**
Secondly, we liveness into the source code, by introducing *live literals* which are updated automatically when the code or the data is changed. 

Finally, we show how the concept of live literals can be generalized to implement spreadsheets proper, right from within the source code.

All in all, this paper presents the following new ideas:

1. A spreadsheetlike interface to program data
2. Live updating variables within source code
3. A combination of both ...


# Background     { #background }

## Liveness

First proposed as a design principle by Maloney and Smith @maloney_directness_1995, liveness indicates that a user interface is always active and reactive. According to @maloney_directness_1995 in a live interface _``objects respond to user actions, animations run, layout happens, and information displays are updated continuously''_. More recently live programming has found its way to the public eye, among others by Bret Victor in his talk `Inventing on Principle' @Victor2012. Figure [#fig-bret], taken from Victor's talk, illustrates the idea of live programming: on the right, we have source code and on the left, we have the result of that code, in this case: a tree. Modifying the code will immediately affect the tree.
 
This liveness is also present in spreadsheet systems. When a users enters a formula and presses enter, they see the result, without any effort such as compilation. Liveness of spreadsheets powers their flexibility, often praised as their key success factor.

~ Figure { #fig-bret; caption:"Live programming: on the right the source code and on the left its instantiation of the code which changes immediately when the code is updated, screen shot from @Victor2012"; page-align:here }
![bret]
~
[bret]: images/bret.png "bret"  { width:auto; max-width:90% }

## Directness
Another benefit of spreadsheets is that their interface combines data, metadata and calculations together in one view, and provides the user with easy access to all. Just by clicking a formula, one can manipulate it. This is often called `directness': _``the feeling that one is directly manipulating the object''_@shneiderman_direct_1983. From a cognitive perspective, directness in computing means _``a small distance between a goal and the actions required of the user to achieve the goal_ @burnett_visual_2001.

Maloney and Smith describe directness as the fact that a user can  _``can initiate the process of examining or changing the attributes, structure, and behavior of user interface components by pointing at their graphical representations directly, as opposed to navigating through an alternate representation.''_ @maloney_directness_1995.

This almost exactly describes the interface of a spreadsheet. Instead of navigating to a code behind, a class or an object, spreadsheet users have all ingredients: data, metadata and calculations, in one view, and can access them with one click. 

# Grids in the IDE     { #tg }

In this paper, we will describe two approaches to bring programming and spreadsheet closer together. Firstly, we present an approach called TrueGrid, which has a spreadsheetlike grid interface that can be programmed using JavaScript, as shown in Figure [#fig-TG] and in the embedded code below.

**Look an embedded live version of TrueGrid! (Does not work in preview, but click Generate HTML and open the file from DropBox in the browser) **

~ HtmlOnly
<iframe src="http://www.felienne.com/TrueGrid/simpleGrid/"  width="100%" height="450"></iframe>
~

~Figure { #fig-TG; caption:"Grid and JavaScript input (**to be updated**)"; page-align:here }

![TG]
~
[TG]: images/TG.PNG "TG" { width:auto; max-width:90% }

Using TrueGrid, a programmer you can inspect data and play with an initial implementation, before having to write interfaces or even unit tests. We envision this is a useful tool very early in the development process, when you have some data and only a vague idea of where the project is going. 

## Use Case
We envision programmers using TrueGrid when building programs for very data-driven programs. For example, you have a list of number that you want to manipulate (We need a better example here)

Then, before even writing code or tests, the programmers want to explore the dataset a bit, for example, 

## Moving to 'real' code

After a TrueGrid session, the programmer can extract the methods and tests from it to move on to more structured programming.



<!--( For when we need Javascript syntax highlighting: **madoko so nice**
``` javascript
function hello() {
  return "hello world!"
}
```
)--> 




# Live Literals

# Sheet Literals

# Related Work

# Conclusion & Future Work


[BIB]
